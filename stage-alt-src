#!/usr/bin/python

import ConfigParser
import koji
from optparse import OptionParser
import os
import os.path
import rpm
import subprocess
import sys



'''
Given an srpm and product, stage for alt-src release
'''


def _(args):
    """Stub function for translation"""
    return args


def get_options():
    """process options from command line"""

    usage = _("%prog [options] branch srpm")
    parser = OptionParser(usage=usage)
    parser.add_option("-c", "--config", dest="cfile", default='/etc/altsrc.conf',
                      help=_("use alternate configuration file"), metavar="FILE")
    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help=_("be more verbose"))
    parser.add_option("-d", "--debug", action="store_true", default=False,
                      help=_("show debug output"))
    parser.add_option("--force", action="store_true", default=False,
                      help=_("force operation"))
    parser.add_option("-o", "--option", dest="copts", action="append", metavar="OPT=VALUE",
                      help=_("set config option"))
    (options, args) = parser.parse_args()

    options.branch = args[0]
    options.source = args[1]

    options.config = get_config(options.cfile, options.copts)

    return options


config_defaults = {
    'stagedir' : '/srv/alt-src-stage',
    'gitdir' : '/srv/git',
    'lookaside' : '/srv/cache/lookaside',
}

config_int_opts = set()
config_bool_opts = set()

def get_config(cfile, overrides):
    if not os.access(cfile, os.F_OK):
        die("Missing config file: %s" % cfile)
    cp = ConfigParser.RawConfigParser()
    cp.read(cfile)
    if not cp.has_section('altsrc'):
        die("Configuration file missing [altsrc] section: %s" % cfile)

    #apply overrides from command line
    overrides = overrides or []
    for opt in overrides:
        parts = opt.split("=", 1)
        if len(parts) != 2:
            die('Invalid option specification: %s\nUse OPT=VALUE' % opt)
        key, value = parts
        cp.set('altsrc', key, value)

    #generate config dictionary
    config = dict(config_defaults)  #copy
    for key in cp.options('altsrc'):
        if key in config_int_opts:
            config[key] = cp.getint('altsrc', key)
        elif key in config_bool_opts:
            config[key] = cp.getboolean('altsrc', key)
        else:
            config[key] = cp.get('altsrc', key)

    #sanity checks
    if not os.path.isdir(config['stagedir']):
        die("No such directory: %s" % config['stagedir'])

    return config


class Stager(object):

    def __init__(self, options):
        self.options = options
        self.srpm = options.source
        #TODO - support pulling srpm from Brew
        if not os.path.isfile(self.srpm):
            die("No such file: %s", self.srpm)

    def run(self):
        self.read_srpm()
        # TODO: package whitelist/blacklist
        self.make_workdir()


    def read_srpm(self):
        h = koji.get_rpm_header(self.srpm)
        self.headers = h
        if h[rpm.RPMTAG_SOURCEPACKAGE] != 1:
            die("%s is not a source package" % self.srpm)
        data = koji.get_header_fields(h, ['name','version','release'])
        self.nvr = "%(name)s-%(version)s-%(release)s" % data
        self.package = data['name']

    def make_workdir(self):
        dirname = os.path.join(self.options.config['stagedir'], self.nvr)
        if os.path.islink(dirname):
            die("%s is a symlink" % dirname)
        elif os.path.isdir(dirname):
            if self.options.force:
                print "Overwriting existing workdir: %s" % dirname
            else:
                die("Work directory %s directory exists, use --force to overwrite." % dirname)
        elif os.path.exists(dirname):
            die("%s exists and is not a directory" % dirname)
        koji.ensuredir(dirname)
        self.workdir = dirname

    def explode_srpm(srpm, destdir=None):
        # explode our srpm to the given directory
        h = koji.get_rpm_header(srpm)
        if h[rpm.RPMTAG_SOURCEPACKAGE] != 1:
            # we checked this earlier, but since we're about to rpm -i it,
            # let's check again
            die("%s is not a source package" % srpm)
        if destdir is None:
            destdir = os.getcwd()
        else:
            destdir = os.path.abspath(destdir)
            koji.ensuredir(destdir)
        cmd = ['rpm', '--nosignature', '-i', '--define', '_topdir %s' % destdir, srpm]
        print "Running: %r" % cmd
        proc = subprocess.Popen(cmd)
        ret = proc.wait()
        if ret:
            die("command failed: %r" % cmd)



def die(msg):
    print msg
    sys.exit(1)



if __name__ == '__main__':
    options = get_options()
    Stager(options).run()

# the end
